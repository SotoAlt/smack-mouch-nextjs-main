{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "contracts/MouchDrops.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract MouchDrops {\n\tusing ECDSA for bytes32; // ✅ Use OpenZeppelin's ECDSA library\n\n\taddress public owner;\n\tuint256 public cooldownPeriod = 10 minutes;\n\tuint256 public maxDisbursement = 30 ether;\n\tmapping(address => uint256) public lastRequestTime;\n\tmapping(bytes32 => bool) private usedSignatures; // ✅ Prevent replay attacks\n\n\tevent EtherReceived(address indexed sender, uint256 amount);\n\tevent EtherDisbursed(address indexed recipient, uint256 amount);\n\tevent CooldownPeriodUpdated(uint256 newCooldownPeriod);\n\tevent MaxDisbursementUpdated(uint256 newMaxDisbursement);\n\tevent OwnerWithdraw(address indexed owner, uint256 amount);\n\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner, \"Caller is not the owner\");\n\t\t_;\n\t}\n\n\tconstructor() {\n\t\towner = msg.sender;\n\t}\n\n\treceive() external payable {\n\t\temit EtherReceived(msg.sender, msg.value);\n\t}\n\n\tfunction verifySignature(\n\t\taddress recipient,\n\t\tuint256 amount,\n\t\tuint256 nonce,\n\t\tbytes memory _signature\n\t) external view returns (bool) {\n\t\tbytes32 messageHash = getMessageHash(recipient, amount, nonce);\n\t\tbytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\n\n\t\treturn recoverSigner(ethSignedMessageHash, _signature) == owner;\n\t}\n\n\tfunction getMessageHash(\n\t\taddress recipient,\n\t\tuint256 amount,\n\t\tuint256 nonce\n\t) public pure returns (bytes32) {\n\t\treturn keccak256(abi.encodePacked(recipient, amount, nonce));\n\t}\n\n\tfunction getEthSignedMessageHash(\n\t\tbytes32 _messageHash\n\t) public pure returns (bytes32) {\n\t\treturn\n\t\t\tkeccak256(\n\t\t\t\tabi.encodePacked(\n\t\t\t\t\t\"\\x19Ethereum Signed Message:\\n32\",\n\t\t\t\t\t_messageHash\n\t\t\t\t)\n\t\t\t);\n\t}\n\n\tfunction recoverSigner(\n\t\tbytes32 _ethSignedMessageHash,\n\t\tbytes memory _signature\n\t) public pure returns (address) {\n\t\t(bytes32 r, bytes32 s, uint8 v) = _splitSignature(_signature);\n\t\treturn ecrecover(_ethSignedMessageHash, v, r, s);\n\t}\n\n\tfunction _splitSignature(\n\t\tbytes memory _signature\n\t) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\n\t\trequire(_signature.length == 65, \"Invalid signature length\");\n\n\t\tassembly {\n\t\t\tr := mload(add(_signature, 32))\n\t\t\ts := mload(add(_signature, 64))\n\t\t\tv := byte(0, mload(add(_signature, 96)))\n\t\t}\n\t}\n\n\tfunction disburse(\n\t\taddress payable recipient,\n\t\tuint256 amount,\n\t\tuint256 nonce,\n\t\tbytes memory signature\n\t) external {\n\t\trequire(recipient != address(0), \"Invalid recipient\");\n\t\trequire(amount > 0 && amount <= maxDisbursement, \"Invalid amount\");\n\t\trequire(\n\t\t\taddress(this).balance >= amount,\n\t\t\t\"Insufficient contract balance\"\n\t\t);\n\t\trequire(\n\t\t\tblock.timestamp >= lastRequestTime[msg.sender] + cooldownPeriod,\n\t\t\t\"Cooldown period not expired\"\n\t\t);\n\n\t\t// ✅ Step 3: Verify the signature\n\t\t// (bool valid, ) = verifySignature(recipient,);\n\n\t\t// require(valid, \"Invalid signature\");\n\t\t// require(!usedSignatures[ethSignedMessageHash], \"Signature already used\"); // ✅ Prevent replay attacks\n\n\t\t// // ✅ Prevent replay attacks\n\t\t// usedSignatures[ethSignedMessageHash] = true;\n\t\tlastRequestTime[msg.sender] = block.timestamp;\n\n\t\t// ✅ Send Ether to the recipient\n\t\t(bool sent, ) = recipient.call{ value: amount }(\"\");\n\t\trequire(sent, \"Failed to disburse rewards\");\n\n\t\temit EtherDisbursed(recipient, amount);\n\t}\n\n\tfunction setCooldownPeriod(uint256 newCooldownPeriod) external onlyOwner {\n\t\tcooldownPeriod = newCooldownPeriod;\n\t\temit CooldownPeriodUpdated(newCooldownPeriod);\n\t}\n\n\tfunction setMaxDisbursement(uint256 newMaxDisbursement) external onlyOwner {\n\t\trequire(\n\t\t\tnewMaxDisbursement > 0,\n\t\t\t\"Max disbursement must be greater than zero\"\n\t\t);\n\t\tmaxDisbursement = newMaxDisbursement;\n\t\temit MaxDisbursementUpdated(newMaxDisbursement);\n\t}\n\n\tfunction withdrawAll() external onlyOwner {\n\t\tuint256 contractBalance = address(this).balance;\n\t\trequire(contractBalance > 0, \"No funds to withdraw\");\n\n\t\t(bool sent, ) = owner.call{ value: contractBalance }(\"\");\n\t\trequire(sent, \"Failed to withdraw funds\");\n\n\t\temit OwnerWithdraw(owner, contractBalance);\n\t}\n\n\tfunction transferOwnership(address newOwner) external onlyOwner {\n\t\trequire(newOwner != address(0), \"New owner cannot be zero address\");\n\t\towner = newOwner;\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}